-- problem statement
-- CUSTOMERS AND  BOOKING ANALYSIS
# 1. Identify customers who have completed the most bookings. What insights can you draw about their behavior? 
SELECT 
    c.name, 
    COUNT(*) AS completed_bookings
FROM 
    Customers c
JOIN 
    Bookings b ON c.customer_id = b.customer_id
WHERE 
    b.status = 'completed'
GROUP BY 
    c.name
ORDER BY 
    completed_bookings DESC
LIMIT 1;
-- insight:The customer(s) who frequently complete bookings are likely loyal, satisfied, and possibly power users. These customers can be targeted for rewards or loyalty programs.

# 2. Find customers who have canceled more than 30% of their total bookings. What could be the reason for frequent cancellations? 
SELECT 
    c.name,
    COUNT(*) AS total_bookings,
    SUM(CASE WHEN b.status = 'cancelled' THEN 1 ELSE 0 END) AS cancelled_bookings,
    ROUND(SUM(CASE WHEN b.status = 'cancelled' THEN 1 ELSE 0 END)*100.0 / COUNT(*), 2) AS cancellation_rate
FROM 
    Customers c
JOIN 
    Bookings b ON c.customer_id = b.customer_id
GROUP BY 
    c.name
HAVING 
    cancellation_rate > 30;
-- insight:Frequent cancellations may indicate unsatisfactory experiences, such as driver delays, last-minute changes, or technical glitches. You could trigger a feedback survey or customer support follow-up for these users.

# 3. Determine the busiest day of the week for bookings. How can the company optimize cab availability on peak days?
SELECT 
    DAYNAME(booking_time) AS day_of_week,
    COUNT(*) AS total_bookings
FROM 
    Bookings
GROUP BY 
    day_of_week
ORDER BY 
    total_bookings DESC
LIMIT 1;
-- insight:The busiest day helps optimize cab allocation, driver scheduling, and possibly implement dynamic pricing on high-demand days.

-- DRIVER  PERFORMANCE AND EFFICEINCY  
# 1. Identify drivers who have received an average rating below 3.0 in the past three months. What strategies can be implemented to improve their performance? 
SELECT 
    d.driver_id,
    d.name,
    ROUND(AVG(f.driver_rating), 2) AS avg_driver_rating
FROM 
    Feedback f
JOIN 
    Bookings b ON f.booking_id = b.booking_id
JOIN 
    Cabs c ON b.cab_id = c.cab_id
JOIN 
    Drivers d ON c.driver_id = d.driver_id
WHERE 
    f.driver_rating IS NOT NULL
    AND f.feedback_id IS NOT NULL
    AND f.feedback_id IN (
        SELECT feedback_id
        FROM Feedback
        WHERE feedback_id IS NOT NULL
    )
    AND f.feedback_id IS NOT NULL
    AND f.booking_id IN (
        SELECT booking_id
        FROM Bookings
        WHERE booking_time >= CURDATE() - INTERVAL 3 MONTH
    )
GROUP BY 
    d.driver_id, d.name
HAVING 
    avg_driver_rating < 3.0;
-- Strategy Suggestions:1.Assign training or refresher courses on customer handling.
-- Strategy Suggestions:2.Monitor ride quality more closely.
-- Strategy Suggestions:3.Offer incentives for improved feedback.

# 2. Find the top 5 drivers who have completed the longest trips in terms of distance.What does this say about their working patterns? 
 SELECT 
    d.driver_id,
    d.name,
    MAX(td.distance_km) AS longest_trip_km
FROM 
    TripDetails td
JOIN 
    Bookings b ON td.booking_id = b.booking_id
JOIN 
    Cabs c ON b.cab_id = c.cab_id
JOIN 
    Drivers d ON c.driver_id = d.driver_id
WHERE 
    b.status = 'completed'
GROUP BY 
    d.driver_id, d.name
ORDER BY 
    longest_trip_km DESC
LIMIT 5;
-- insight: These drivers may prefer or be assigned to intercity or long-route rides, indicating high endurance or route familiarity.

# 3. Identify drivers with a high percentage of canceled trips. Could this indicate driver unreliability?
SELECT 
    d.driver_id,
    d.name,
    COUNT(*) AS total_trips,
    SUM(CASE WHEN b.status = 'cancelled' THEN 1 ELSE 0 END) AS cancelled_trips,
    ROUND(SUM(CASE WHEN b.status = 'cancelled' THEN 1 ELSE 0 END)*100.0 / COUNT(*), 2) AS cancel_rate
FROM 
    Bookings b
JOIN 
    Cabs c ON b.cab_id = c.cab_id
JOIN 
    Drivers d ON c.driver_id = d.driver_id
GROUP BY 
    d.driver_id, d.name
HAVING 
    cancel_rate > 30;
-- insight:1.High cancellation rate may reflect driver unreliability, poor communication, or logistical issues.
-- insight:2.Reassess driverâ€™s performance or gather driver feedback for root causes.

-- REVENUE & BUSSINESS MATRIXS
# 1. Calculate the total revenue generated by completed bookings in the last 6 months.How has the revenue trend changed over time? 
 -- Total revenue in the last 6 months
SELECT 
    ROUND(SUM(td.fare), 2) AS total_revenue
FROM 
    TripDetails td
JOIN 
    Bookings b ON td.booking_id = b.booking_id
WHERE 
    b.status = 'completed'
    AND b.booking_time >= CURDATE() - INTERVAL 6 MONTH;
-- Monthly revenue trend for the last 6 months
SELECT 
    DATE_FORMAT(b.booking_time, '%Y-%m') AS month,
    ROUND(SUM(td.fare), 2) AS monthly_revenue
FROM 
    TripDetails td
JOIN 
    Bookings b ON td.booking_id = b.booking_id
WHERE 
    b.status = 'completed'
    AND b.booking_time >= CURDATE() - INTERVAL 6 MONTH
GROUP BY 
    DATE_FORMAT(b.booking_time, '%Y-%m')
ORDER BY 
    month;
-- INSIGHT:This helps track peak vs off-peak revenue months, aiding in budget forecasting.

# 2. Identify the top 3 most frequently traveled routes based on PickupLocation and DropoffLocation. Should the company allocate more cabs to these routes? 
SELECT 
    pickup_location,
    dropoff_location,
    COUNT(*) AS trip_count
FROM 
    TripDetails
GROUP BY 
    pickup_location, dropoff_location
ORDER BY 
    trip_count DESC
LIMIT 3;
-- INSIGHT:These routes have high demand. Allocate more cabs during peak hours or deploy dynamic pricing.

# 3. Determine if higher-rated drivers tend to complete more trips and earn higher fares. Is there a direct correlation between driver ratings and earnings? 
SELECT 
    d.driver_id,
    d.name,
    d.rating AS driver_rating,
    COUNT(b.booking_id) AS total_trips,
    ROUND(SUM(td.fare), 2) AS total_earnings
FROM 
    Drivers d
JOIN 
    Cabs c ON d.driver_id = c.driver_id
JOIN 
    Bookings b ON c.cab_id = b.cab_id
JOIN 
    TripDetails td ON b.booking_id = td.booking_id
WHERE 
    b.status = 'completed'
GROUP BY 
    d.driver_id, d.name, d.rating
ORDER BY 
    total_earnings DESC;
-- INSIGHTS:If higher-rated drivers show better trip count and earnings, it confirms value in driver quality. You can further calculate correlation in Python or Excel.

-- OPERATIONS EFFICEINCY AND OPTIMIZATION
# 1. Analyze the average waiting time (difference between booking time and trip start time) for different pickup locations. How can this be optimized to reduce delays? 
 SELECT 
    td.pickup_location,
    ROUND(AVG(TIMESTAMPDIFF(MINUTE, b.booking_time, td.start_time)), 2) AS avg_waiting_time_mins,
    COUNT(*) AS total_trips
FROM 
    TripDetails td
JOIN 
    Bookings b ON td.booking_id = b.booking_id
WHERE 
    b.status = 'completed'
GROUP BY 
    td.pickup_location
ORDER BY 
    avg_waiting_time_mins DESC;
-- INSIGHT: Locations with higher wait times may need better cab availability or driver allocation.

# 2. Identify the most common reasons for trip cancellations from customer feedback. What actions can be taken to reduce cancellations? 
SELECT 
    comments,
    COUNT(*) AS count
FROM 
    Feedback f
JOIN 
    Bookings b ON f.booking_id = b.booking_id
WHERE 
    b.status = 'cancelled'
GROUP BY 
    comments
ORDER BY 
    count DESC;
-- INSIGHT:This reveals user-documented reasons for cancellations. If rude driver or no cab available comes up often, training or driver incentives may help.

# 3. Find out whether shorter trips (low-distance) contribute significantly to revenue.Should the company encourage more short-distance rides?
 SELECT 
    CASE 
        WHEN td.distance_km < 5 THEN 'Short Trip (<5 km)'
        ELSE 'Long Trip (>=5 km)'
    END AS trip_type,
    COUNT(*) AS trip_count,
    ROUND(SUM(td.fare), 2) AS total_revenue,
    ROUND(AVG(td.fare), 2) AS avg_fare
FROM 
    TripDetails td
JOIN 
    Bookings b ON td.booking_id = b.booking_id
WHERE 
    b.status = 'completed'
GROUP BY 
    trip_type;
-- INSIGHT:If short trips are frequent and profitable, the company can promote them with quick-booking options.

-- COMPARATIVE AND PREDICTIVE ANALYSIS
# 1. Compare the revenue generated from 'Sedan' and 'SUV' cabs. Should the company invest more in a particular vehicle type? 
SELECT 
    c.cab_type,
    COUNT(*) AS total_trips,
    ROUND(SUM(td.fare), 2) AS total_revenue,
    ROUND(AVG(td.fare), 2) AS avg_revenue_per_trip
FROM 
    TripDetails td
JOIN 
    Bookings b ON td.booking_id = b.booking_id
JOIN 
    Cabs c ON b.cab_id = c.cab_id
WHERE 
    b.status = 'completed'
GROUP BY 
    c.cab_type
ORDER BY 
    total_revenue DESC;
-- Insight: Helps determine which cab type brings more revenue and deserves further investment.

# 2. Predict which customers are likely to stop using the service based on their last booking date and frequency of rides. How can customer retention be improved? 
SELECT 
    c.customer_id,
    c.name,
    MAX(b.booking_time) AS last_booking_date,
    COUNT(*) AS total_completed_bookings,
    DATEDIFF(CURDATE(), MAX(b.booking_time)) AS days_since_last_booking
FROM 
    Customers c
JOIN 
    Bookings b ON c.customer_id = b.customer_id
WHERE 
    b.status = 'completed'
GROUP BY 
    c.customer_id
HAVING 
    days_since_last_booking > 60
    AND total_completed_bookings < 3
ORDER BY 
    days_since_last_booking DESC;
-- Insight: Target these customers with re-engagement offers, discounts, or surveys.

# 3. Analyze whether weekend bookings differ significantly from weekday bookings.Should the company introduce dynamic pricing based on demand? 
SELECT 
    CASE 
        WHEN DAYOFWEEK(booking_time) IN (1,7) THEN 'Weekend'
        ELSE 'Weekday'
    END AS day_type,
    COUNT(*) AS total_bookings,
    ROUND(SUM(td.fare), 2) AS total_revenue,
    ROUND(AVG(td.fare), 2) AS avg_fare
FROM 
    Bookings b
JOIN 
    TripDetails td ON b.booking_id = td.booking_id
WHERE 
    b.status = 'completed'
GROUP BY 
    day_type;
--  Insight: If weekends have higher demand, the company can apply dynamic pricing or scale up driver availability.bookings
 






